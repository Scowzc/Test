#!/bin/bash 一个约定标记，告诉系统这个脚本需要什么解释器来执行
echo 用于向窗口输出文本
chmod +x ./test.sh #使脚本具有执行权限
./test.sh #执行脚本
$  ${}  #引用变量
定义变量 等号两边不能有空格
注释：#
多行注释：
:<<EOF
注释内容...
注释内容...
注释内容...
EOF
#EOF也可以使用其他符号,如',Wzc

readonly BL #将变量定义为只读变量，不能被改变
unset BL #删除变量，不能删只读变量



变量类型:运行shell时，会同时存在三种变量：
1) 局部变量 局部变量在脚本或命令中定义，仅在当前shell实例中有效，其他shell启动的程序不能访问局部变量。
2) 环境变量 所有的程序，包括shell启动的程序，都能访问环境变量，有些程序需要环境变量来保证其正常运行。必要的时候shell脚本也可以定义环境变量。
3) shell变量 shell变量是由shell程序设置的特殊变量。shell变量中有一部分是环境变量，有一部分是局部变量，这些变量保证了shell的正常运行

字符串：可以用单引号，也可以用双引号，也可以不用引号。
单引号字符串的限制：
1）单引号里的任何字符都会原样输出，单引号字符串中的变量是无效的；
2）单引号字串中不能出现单独一个的单引号（对单引号使用转义符后也不行），但可成对出现，作为字符串拼接使用。
双引号的优点：
1）双引号里可以有变量
2）双引号里可以出现转义字符

string="Hello World!"
拼接字符串：
    "hello, "$string" !"
获取字符串长度：
    ${#string}
提取子字符串：
    ${string:1:4} #从索引为1的开始截取4个字符
查找子字符串：
    查找字符 l 或 o 的位置(哪个字母先出现就计算哪个)：
    echo `expr index "${string}" lo`   #3

Shell数组： 
    定义：数组名=(值1 值2 ... 值n) #空格分隔
    单独定义：数组名[下标]=值
    读取：${数组名[下标]}  ${数组名[@]} #获取所以元素
获取数组长度：
    ${#数组名[@]} 或 ${#数组名[*]} #取得数组元素的个数
    ${#数组名[下标]} #取得数组单个元素的长度

参数传递：
$ ./test.sh 1 2 3  $n #$0 为执行的文件名(包含文件路径) $1 1
$#	传递到脚本的参数个数
$*	以一个单字符串显示所有向脚本传递的参数。
    如"$*"用「"」括起来的情况、以"$1 $2 … $n"的形式输出所有参数。
$$	脚本运行的当前进程ID号
$!	后台运行的最后一个进程的ID号
$@	与$*相同，但是使用时加引号，并在引号中返回每个参数。
    如"$@"用「"」括起来的情况、以"$1" "$2" … "$n" 的形式输出所有参数。
$-	显示Shell使用的当前选项，与set命令功能相同。
$?	显示最后命令的退出状态。0表示没有错误，其他任何值表明有错误。

运算： + - * / % = == != 
+ - * / % : `expr $a +(\*乘要转义)$b` #符号两边必须空格
[$a == $b] #相同返回true，==两边必须空格
[$a != $b] #不相同返回true
其他运算符：https://www.runoob.com/linux/linux-shell-basic-operators.html

read 命令从标准输入中读取一行，并把输入行的每个字段的值指定给 shell 变量
echo -e "OK! \n" #-e 开启转义
原样输出字符串，不进行转义或取变量(用单引号)
显示结果定向至文件：echo "It is a test" > myfile
显示命令运行结果：echo `date`

printf 
    语法:printf  format-string  [arguments...]
    format-string: 为格式控制字符串
    arguments: 为参数列表。
%s %c %d %f 都是格式替代符，％s 输出一个字符串，％d 整型输出，％c 输出一个字符，％f 输出实数，以小数形式输出。
%-10s 指一个宽度为 10 个字符（- 表示左对齐，没有则表示右对齐），任何字符都会被显示在 10 个字符宽的字符内，如果不足则自动以空格填充，超过也会将内容全部显示出来。
%-4.2f 指格式化为小数，其中 .2 指保留2位小数。
# format-string为双引号
# 单引号与双引号效果一样
# 没有引号也可以输出
# 格式只指定了一个参数，但多出的参数仍然会按照该格式输出，format-string 被重用
# 如果没有 arguments，那么 %s 用NULL代替，%d 用 0 代替

Shell中的 test 命令用于检查某个条件是否成立，它可以进行数值、字符和文件三个方面的测试。
https://www.runoob.com/linux/linux-shell-test.html

IF ELSE：
    if condition1
    then
        command1
    elif condition2 
    then 
        command2
    else
        commandN
    fi
    
FOR：
    for var in item1 item2 ... itemN
    do
        command1
        command2
        ...
        commandN
    done

WHILE:
    while condition
    do
        command
    done

更多：https://www.runoob.com/linux/linux-shell-func.html